<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="messengerMapper">
    <resultMap type="Message" id="messageResultSet">
        <result column="msg_no" property="msgNo" />
        <result column="emp_sno" property="empSno" />
        <result column="emp_rno" property="empRno" />
        <result column="msg_content" property="msgContent" />
        <result column="msg_date" property="msgDate" />
        <result column="sendEmp_name" property="sendEmpName" />
        <result column="receiveEmp_name" property="receiveEmpName"/>
        <result column="chat_partner_name" property="chatPartnerName"/>
        <result column="chat_partner_no" property="chatPartnerNo"/>
        <result column="message_type" property="messageType"/>
    </resultMap>

    <update id="updateMsOnline">
        update employee_tb
        set messenger_status = 'Y'
        where emp_id = #{empId}
    </update>

    <update id="updateMsOffline">
        update employee_tb
        set messenger_status = 'N'
        where emp_id = #{empId}
    </update>

    <insert id="sendMessage">
        insert
        into message_tb
        ( msg_no
        , emp_sno
        , emp_rno
        , msg_content
        )
        values
        (
        seq_mno.nextval
        , #{empSno}
        , #{empRno}
        , #{msgContent}
        )
    </insert>

    <select id="selectChatList" resultMap="messageResultSet">
        select
        m.msg_no
        , m.emp_sno
        , m.emp_rno
        , m.msg_content
        , to_char(m.msg_date, 'HH:MI PM') as "msg_date"
        , e.emp_name as "sendEmp_name"
        , (select emp_name
        from employee_tb
        where emp_no = #{empRno}) as "receiveEmp_name"
        , m.msg_date as "sort_date"
        from message_tb m
        join employee_tb e on (m.emp_sno = e.emp_no)
        where (m.emp_sno = #{empSno} and m.emp_rno = #{empRno})
        or (m.emp_sno = #{empRno} and m.emp_rno = #{empSno})
        order
        by m.msg_date asc
    </select>

    <select id="getLatestMessagesForUser" parameterType="int" resultMap="messageResultSet">
        SELECT
        msg_no,
        CASE
        WHEN emp_rno = #{myNo} THEN emp_sno_name
        WHEN emp_sno = #{myNo} THEN emp_rno_name
        END as chat_partner_name,
        CASE
        WHEN emp_rno = #{myNo} THEN emp_sno
        WHEN emp_sno = #{myNo} THEN emp_rno
        END as chat_partner_no,
        msg_content,
        TO_CHAR(msg_date, 'MM/DD HH:MI PM') as msg_date,
        CASE
        WHEN emp_rno = #{myNo} THEN 'SENT'
        WHEN emp_sno = #{myNo} THEN 'RECEIVED'
        END as message_type
        FROM (
        SELECT
        m.msg_no,
        m.emp_rno,
        m.emp_sno,
        m.msg_content,
        m.msg_date,
        e1.emp_name as emp_rno_name,
        e2.emp_name as emp_sno_name,
        ROW_NUMBER() OVER (
        PARTITION BY
        CASE
        WHEN m.emp_rno = #{myNo} THEN m.emp_sno
        WHEN m.emp_sno = #{myNo} THEN m.emp_rno
        END
        ORDER BY m.msg_date DESC
        ) as rn
        FROM message_tb m
        JOIN employee_tb e1 ON m.emp_rno = e1.emp_no
        JOIN employee_tb e2 ON m.emp_sno = e2.emp_no
        WHERE m.emp_rno = #{userNo} OR m.emp_sno = #{userNo}
        ) ranked
        WHERE rn = 1
        ORDER BY msg_date DESC
    </select>

    <select id="selectChatRoom" resultMap="messageResultSet">
        select
        msg_no
        , emp_name as "sendEmp_name"
        , msg_content
        , to_char(msg_date, 'HH:MI PM') as "msg_date"
        from message_tb m
        join employee_tb on (emp_sno = emp_no)
        where (emp_rno = #{empRno} and emp_sno = #{empSno})
        and m.msg_date = (
        select max(msg_date)
        from message_tb
        where (emp_rno = #{empRno} and emp_sno = #{empSno}))
    </select>

    <select id="selectMessage" resultMap="messageResultSet">
        select
        msg_no
        , emp_Sno
        , emp_Rno
        , msg_content
        , msg_date
        from message_tb
        where emp_Rno = #{empNo}
    </select>

    <delete id="chatExit">
        delete
        from message_tb
        where (emp_sno = #{exitEmpSno} and emp_rno = #{exitEmpRno})
        or (emp_sno = #{exitEmpRno} and emp_rno = #{exitEmpSno})
    </delete>

</mapper>